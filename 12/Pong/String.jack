// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array ss;
    field int len;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let ss = Array.new(maxLength + 1);
        let len = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do ss.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return ss[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let ss[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let ss[len] = c;
        let len = len + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let len = len - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, d, v;
        var bool is_neg;
        let is_neg = false;
        let i = 0;
        let v = 0;

        if (ss[i] = 45) {
            let is_neg = true;
        }

        while (i < len) {
            if ((ss[i] > 47) & (ss[i] < 58)) {
                let d = ss[i] - 48;
                let v = v * 10 + d;
            }
            let i = i + 1;
        }

        if (is_neg) {
            return -v;
        } else {
            return v;
        }
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var Array temp;
        var int i;
        var int lastDigit;
        var int c;
        var bool is_neg;

        let temp = Array.new(10);
        let i = 0;
        let is_neg = false;

        if (val < 0) {
            let is_neg = true;
        }

        let val = Math.abs(val);

        while (val > 0) {
            let lastDigit = val - (10 * (val / 10));
            let temp[i] = lastDigit + 48;
            let val = val / 10;
            let i = i + 1;
        }

        let len = 0;
        if (is_neg) {
            let ss[len] = 45;
            let len = len + 1;
        }

        while (i > 0) {
            let i = i - 1;
            let ss[len] = temp[i];
            let len = len + 1;
        }
        return;
    }


    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}

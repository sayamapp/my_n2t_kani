// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static bool color;

    /** Initializes the Screen. */
    function void init() {
        let color = true;

        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, word, mask;
        let address = 16384 + (y * 32) + (x / 16);
        let word = Memory.peek(address);
        let mask = Screen.getMask(x - (16 * (x / 16)));
        if (color) {
            let word = word | mask;
        } else {
            let word = word & (~mask);
        }
        do Memory.poke(address, word);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, a, b, adyMinusbdx, temp;
        let dx = x2 - x1;
        let dy = y2 - y1;
        let a = 0;
        let b = 0;
        let adyMinusbdx = 0;

        if (((dx > 0) & (dy < 0)) | ((dx < 0) & (dy > 0))) {
            if (dx < 0) {
                let temp = x1;
                let x1 = x2;
                let x2 = temp;
                let temp = y1;
                let y1 = y2;
                let y2 = temp;
                let dx = x2 - x1;
                let dy = y2 - y1;
            }
            while ((a < (dx + 1) & (b > (dy - 1)))) {
                do Screen.drawPixel(x1 + a, y1 + b);
                if (adyMinusbdx < 0) {
                    let a = a + 1;
                    let adyMinusbdx = adyMinusbdx - dy;
                } else {
                    let b = b - 1;
                    let adyMinusbdx = adyMinusbdx - dx;
                }
            }
        }

        if (((dx > 0) & (dy > 0)) | ((dx < 0) & (dy < 0))) {
            if (dx < 0) {
                let temp = x1;
                let x1 = x2;
                let x2 = temp;
                let temp = y1;
                let y1 = y2;
                let y2 = temp;
                let dx = x2 - x1;
                let dy = y2 - y1;
            }
            while ((a < (dx + 1)) & (b < (dy + 1))) {
                do Screen.drawPixel(x1 + a, y1 + b);
                if (adyMinusbdx < 0) {
                    let a = a + 1;
                    let adyMinusbdx = adyMinusbdx + dy;
                } else {
                    let b = b + 1;
                    let adyMinusbdx = adyMinusbdx - dx;
                }
            }
        }

        if (dx = 0) {
            if (dy > 0) {
                while (b < (dy + 1)) {
                    do Screen.drawPixel(x1, y1 + b);
                    let b = b + 1;
                }
            } else {
                while (b > (dy - 1)) {
                    do Screen.drawPixel(x1, y1 + b);
                    let b = b - 1;
                }
            }
        }

        if (dy = 0) {
            if (dx > 0) {
                while (a < (dx + 1)) {
                    do Screen.drawPixel(x1 + a, y1);
                    let a = a + 1;
                }
            } else {
                while (a > (dx - 1)) {
                    do Screen.drawPixel(x1 + a, y1);
                    let a = a - 1;
                }
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        if (y1 < y2) {
            while (y1 < (y2 + 1)) {
                do Screen.drawLine(x1, y1, x2, y1);
                let y1 = y1 + 1;
            }
        } else {
            while (y1 > (y2 - 1)) {
                do Screen.drawLine(x1, y1, x2, y1);
                let y1 = y1 - 1;
            }
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy;
        var int n;
        let r = Math.min(181, r);
        let dy = -r;
        while (dy < (r + 1)) {
            let n = Math.sqrt((r * r) - (dy * dy));
            do Screen.drawLine(Math.max(0, x - n), Math.max(0, y + dy),
                Math.min(511, x + n), Math.min(255, y + dy));
            let dy = dy + 1;
        }
        return;
    }

    function int getMask(int word) {
        var int res, i;
        let res = 1;
        let i = 0;
        while (i < word) {
            let res = res * 2;
            let i = i + 1;
        }
        return res;
    }
}
